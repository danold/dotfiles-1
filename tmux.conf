# =============================================================================
# = Movement, splitting and resizing  =========================================
# =============================================================================
# Move around panes vim style
bind h select-pane -L
bind j select-pane -D
bind k select-pane -U
bind l select-pane -R

# Resize panes 
bind-key C-j resize-pane -D
bind-key C-k resize-pane -U
bind-key C-h resize-pane -L
bind-key C-l resize-pane -R

# Split panes using | and -
bind | split-window -h
bind - split-window -v
unbind '"'
unbind %

# TODO: Delete?
# Hyper key integration
bind -n C-y select-pane -L
bind -n C-o select-pane -R

# For resizing
bind-key -n C-L resize-pane -R 15
bind-key -n C-H resize-pane -L 15
setw -g aggressive-resize on

# =============================================================================
# = Special behavior  =========================================================
# =============================================================================
# Prompt to rename window right after it's created
set-hook -g after-new-window 'command-prompt -I "#{window_name}" "rename-window '%%'"'

# Do not automatically name windows 
set-window-option -g automatic-rename off
set-option -g set-titles off

# Reduce time to register ESC
set -s escape-time 0

# =============================================================================
# = Generic keybindings =======================================================
# =============================================================================
# Reload config file 
bind C-r source-file ~/.tmux.conf \; display "Config reloaded"

# Rename session and window
bind r command-prompt -I "#{window_name}" "rename-window '%%'"
bind R command-prompt -I "#{session_name}" "rename-session '%%'"

# Use m to toggle mouse
unbind m
bind-key m setw mouse

# Kill session
bind-key C-k kill-session

# TODO: use C-a after rebinding caps lock
# Use another prefix
unbind C-b
# § is used for remote prefix instead
# set -g prefix §
# bind § send-prefix
# hammerspoon remaps C-a to C-b
set -g prefix C-b
# bind C-a send-prefix
bind-key W last-window


# =============================================================================
# = For scrolling and copying =================================================
# =============================================================================
# Enable vim mode
set-window-option -g mode-keys vi

# vim-like keys to begin selection
bind-key -T copy-mode-vi 'v' send -X begin-selection
bind-key -T copy-mode-vi 'y' send -X copy-selection-and-cancel

# bind prefix + / to search
bind-key / copy-mode \; send-key ?

# set -g mouse on
bind -Tcopy-mode WheelUpPane send -N1 -X scroll-up
bind -Tcopy-mode WheelDownPane send -N1 -X scroll-down

# TODO: Verify that this actually works
# Do not copy selection and cancel copy mode on drag end event
# Prefer iTerm style selection: select, then mouse click to copy to buffer
unbind -T copy-mode-vi MouseDragEnd1Pane
bind -T copy-mode-vi MouseDown1Pane select-pane \;\
  send-keys -X copy-pipe "pbcopy" \;\
  send-keys -X clear-selection

# bind p paste-buffer
# bind C-p choose-buffer

# =============================================================================
# = Status bar & UI  ==========================================================
# =============================================================================
# Begin numbering windows with 1
set -g base-index 1
set-option -g status-interval 5
set -g status-position bottom

# Super elaborate status
SHC=colour4 # Status Highligt Color
# SHC=colour39 # Original
SHTC=colour235 # Status Highligt Text Color
#SHTC=colour25 # Original
SGC1=colour245 # Status Gray Color
SGC2=colour238
SBC1=colour235 # Status Black Color
SBC2=colour234
SNC=colour252 # Status Neutral Color

# Status dimensions
set -g status-left-length 50
set -g status-right-length 50

# Base colors
set -g status-fg white
set -g status-bg $SBC2
set -g window-status-activity-attr bold
set -g pane-border-fg $SGC1
set -g pane-active-border-fg $SHC
set -g message-fg colour16
set -g message-bg colour221
set -g message-attr bold


set -g status-left "#[fg=$SBC1,bg=$SNC,bold] ❐ #S #[fg=$SNC,bg=$SGC2,nobold]#[fg=$SGC1,bg=$SGC2,bold] #(whoami) #[fg=$SGC2,bg=$SBC2,nobold]"

set -g window-status-format "#[fg=$SBC2,bg=$SGC2]#[fg=$SGC1,bg=$SGC2,bold] #I #[fg=$SBC2]#[fg=$SGC1] #W #[fg=$SGC2,bg=$SBC2]"

set -g window-status-current-format "#[fg=$SBC2,bg=$SHC]#[fg=$SHTC,bg=$SHC,noreverse,bold] #I  #W #[fg=$SHC,bg=$SBC2,nobold]"

# For the future: you can use your own conditionals to display elements
# some_var=1
# {?some_var,#[fg=$SHC]#[reverse] PREFIX #[noreverse],}

set -g status-right "#{?client_prefix,#[fg=$SHC]#[reverse] PREFIX #[noreverse],}  #[fg=$SBC2,bg=$SNC]#[reverse,nobold]#[noreverse,bold] %H:%M  %d-%b-%y "

# Powerline LGM characters
#     

# Session is considered to be remote when we ssh into host
if-shell 'test -n "$SSH_CLIENT"' \
    'source-file ~/.tmux.remote.conf'

# Uncomment to source remote settings for testing
# source-file ~/.tmux.remote.conf
