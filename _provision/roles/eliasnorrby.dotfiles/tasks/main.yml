---
- name: check if dotfiles folder exists
  stat:
    path: "{{ dotfiles }}"
  register: dotfiles_dir

- name: clone dotfiles
  git:
    repo: "{{ dotfiles_repo }}"
    dest: "{{ dotfiles }}"
    version: "{{ dotfiles_version }}"
  # safety for running locally with a more recent version
  when: dotfiles_dir.stat.isdir is not defined

- name: collect topic configs
  block:
    # Recursively search for 'config.yml's in dotfiles repository
    - find:
        path: "{{ playbook_dir }}/.."
        patterns: "config.yml"
        file_type: file
        recurse: true
      register: find_results
    - set_fact:
        configs: "{{ find_results.files | map(attribute='path') | list }}"
    - include_vars:
        file: "{{ item }}"
      loop: "{{ configs }}"

    - set_fact:
        # to persist
        topics: "{{ topics }}"
        present_topics: "{{ q('dict', topics) | map(attribute='value') | list | flatten | selectattr('state', 'equalto', 'present') | list }}"
        disabled_topics: "{{ q('dict', topics) | map(attribute='value') | list | flatten | selectattr('state', 'equalto', 'disabled') | list }}"
        absent_topics: "{{ q('dict', topics) | map(attribute='value') | list | flatten | selectattr('state', 'equalto', 'absent') | list }}"

    - debug:
        var: present_topics
    - debug:
        var: absent_topics
    - debug:
        var: disabled_topics
    - debug:
        var: absent_topics
        fail: true

- name: user should have a dotfiles_data directory
  file:
    path: "{{ dotfiles_data }}"
    state: directory

  # TODO: loop over absent / disabled topics as well, removing links if necessary
- include_tasks: links.yml
  loop: "{{ present_topics }}"
  loop_control:
    loop_var: topic
